package s.game;

import java.util.List;

public class GameConfigurationLoader {
	  public GameConfig loadGameConfig(String configFile) {
	        try {
	            // Read JSON file into string
	            String configContent = new String(Files.readAllBytes(Paths.get(configFile)));

	            // Parse JSON string into JSONObject
	            JSONObject jsonConfig = new JSONObject(configContent);

	            // Extract game configuration
	            int columns = jsonConfig.optInt("columns", 3); // Default value if "columns" not present
	            int rows = jsonConfig.optInt("rows", 3); // Default value if "rows" not present
	            Map<String, SymbolConfig> symbols = parseSymbols(jsonConfig.getJSONObject("symbols"));
	            List<ProbabilityConfig> probabilities = parseProbabilities(jsonConfig.getJSONArray("probabilities"));
	            Map<String, WinCombinationConfig> winCombinations = parseWinCombinations(jsonConfig.getJSONObject("win_combinations"));

	            // Create GameConfig object
	            return new GameConfig(columns, rows, symbols, probabilities, winCombinations);
	        } catch (IOException e) {
	            e.printStackTrace();
	            return null;
	        }
	    }

	    private Map<String, SymbolConfig> parseSymbols(JSONObject symbolsJson) {
	        Map<String, SymbolConfig> symbolsMap = new HashMap<>();
	        for (String symbolName : symbolsJson.keySet()) {
	            JSONObject symbolObj = symbolsJson.getJSONObject(symbolName);
	            double rewardMultiplier = symbolObj.getDouble("reward_multiplier");
	            String type = symbolObj.getString("type");
	            String action = symbolObj.optString("impact", null); // Optional field
	            Integer extra = symbolObj.optInt("extra", 0); // Optional field

	            symbolsMap.put(symbolName, new SymbolConfig(rewardMultiplier, type, action, extra));
	        }
	        return symbolsMap;
	    }

	    private List<ProbabilityConfig> parseProbabilities(JSONArray probabilitiesJson) {
	        List<ProbabilityConfig> probabilitiesList = new ArrayList<>();
	        for (int i = 0; i < probabilitiesJson.length(); i++) {
	            JSONObject probabilityObj = probabilitiesJson.getJSONObject(i);
	            int column = probabilityObj.getInt("column");
	            int row = probabilityObj.getInt("row");
	            Map<String, Integer> symbols = parseSymbolProbabilities(probabilityObj.getJSONObject("symbols"));

	            probabilitiesList.add(new ProbabilityConfig(column, row, symbols));
	        }
	        return probabilitiesList;
	    }

	    private Map<String, Integer> parseSymbolProbabilities(JSONObject symbolProbabilitiesJson) {
	        Map<String, Integer> symbolProbabilitiesMap = new HashMap<>();
	        for (String symbolName : symbolProbabilitiesJson.keySet()) {
	            int probability = symbolProbabilitiesJson.getInt(symbolName);
	            symbolProbabilitiesMap.put(symbolName, probability);
	        }
	        return symbolProbabilitiesMap;
	    }

	    private Map<String, WinCombinationConfig> parseWinCombinations(JSONObject winCombinationsJson) {
	        Map<String, WinCombinationConfig> winCombinationsMap = new HashMap<>();
	        for (String combinationName : winCombinationsJson.keySet()) {
	            JSONObject combinationObj = winCombinationsJson.getJSONObject(combinationName);
	            double rewardMultiplier = combinationObj.getDouble("reward_multiplier");
	            String when = combinationObj.getString("when");
	            int count = combinationObj.getInt("count");
	            String group = combinationObj.getString("group");
	            JSONArray coveredAreasJson = combinationObj.optJSONArray("covered_areas");

	            List<List<String>> coveredAreas = new ArrayList<>();
	            if (coveredAreasJson != null) {
	                for (int i = 0; i < coveredAreasJson.length(); i++) {
	                    JSONArray areaArray = coveredAreasJson.getJSONArray(i);
	                    List<String> areaList = new ArrayList<>();
	                    for (int j = 0; j < areaArray.length(); j++) {
	                        areaList.add(areaArray.getString(j));
	                    }
	                    coveredAreas.add(areaList);
	                }
	            }

	            winCombinationsMap.put(combinationName, new WinCombinationConfig(rewardMultiplier, when, count, group, coveredAreas));
	        }
	        return winCombinationsMap;
	    }
}
